{"version":3,"sources":["App.tsx","AppHeader.tsx","index.tsx"],"names":["App","useState","error","setError","outputTextAreaValue","setOutputTextAreaValue","oldDataInput","setOldDataInput","useEffect","JSON","stringify","oldPanelJSON","newPanelJSON","options","imageUrl","bgimage","forceImageRefresh","lockSensors","islocked","sensorsTextSize","sensors","mappings","type","title","gridPos","id","targets","pluginVersion","timeFrom","timeShift","datasource","map","sensor","name","displayName","backgroundBlink","backgroundColor","bgColor","bold","decimals","fontColor","link","link_url","position","x","xlocation","y","ylocation","query","metric","alias","visible","unit","unitFormat","valueBlink","mappingId","valueMappingIds","valueMappings","mapping","compareTo","description","values","bgBlink","isSensorFontBold","operator","mappingOperatorName","migratePanelJSON","wrapperBoxHeight","padding","paddingTop","paddingBottom","display","height","width","placeholder","onChange","event","parse","currentTarget","value","style","resize","onClick","element","select","document","execCommand","console","variant","AppHeader","Item","full","paddingLeft","fontSize","Link","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec6caa55.chunk.js","sourcesContent":["import { Box, Flex, Flash, Heading, Text } from \"@primer/components\";\nimport { useEffect, useState } from \"react\";\nimport NewDataFormat from \"./types/NewDataFormat\";\nimport OldDataFormat from './types/OldDataFormat';\n\n// There should be a better faster way but I don't care that much right now\nconst migratePanelJSON = (oldPanelJSON: OldDataFormat): NewDataFormat => {\n  const newPanelJSON: NewDataFormat = {\n    options: {\n      imageUrl: oldPanelJSON.bgimage,\n      forceImageRefresh: false,\n      lockSensors: oldPanelJSON.islocked,\n      sensorsTextSize: 1,\n\n      sensors: [],\n      mappings: [],\n    },\n\n    type: 'pierosavi-imageit-panel',\n    title: oldPanelJSON.title,\n    gridPos: oldPanelJSON.gridPos,\n    id: oldPanelJSON.id,\n    targets: oldPanelJSON.targets,\n    pluginVersion: oldPanelJSON.pluginVersion,\n    timeFrom: oldPanelJSON.timeFrom,\n    timeShift: oldPanelJSON.timeShift,\n    datasource: oldPanelJSON.datasource\n  }\n\n  newPanelJSON.options.sensors = oldPanelJSON.sensors.map((sensor) => ({\n    name: sensor.displayName,\n    backgroundBlink: false,\n    backgroundColor: sensor.bgColor,\n    bold: false,\n    decimals: sensor.decimals,\n    fontColor: sensor.fontColor,\n    link: sensor.link_url,\n    position: {\n      x: sensor.xlocation,\n      y: sensor.ylocation,\n    },\n    query: {\n      id: sensor.metric,\n      alias: sensor.metric,\n    },\n    visible: true,\n    unit: sensor.unitFormat,\n    valueBlink: false,\n    mappingId: sensor.valueMappingIds[0],\n  }))\n\n  newPanelJSON.options.mappings = oldPanelJSON.valueMappings.map((mapping) => ({\n    compareTo: mapping.compareTo,\n    description: '',\n    id: mapping.id,\n    values: {\n      visible: true,\n      backgroundBlink: mapping.bgBlink,\n      backgroundColor: mapping.bgColor,\n      bold: mapping.isSensorFontBold,\n      fontColor: mapping.fontColor,\n      valueBlink: mapping.valueBlink,\n    },\n    // change less to small\n    operator: (mapping.mappingOperatorName === 'lessThan' ? 'smallerThan' : mapping.mappingOperatorName),\n  }))\n\n  return newPanelJSON;\n}\n\nfunction App() {\n  const [error, setError] = useState(false);\n  const [outputTextAreaValue, setOutputTextAreaValue] = useState('');\n  let [oldDataInput, setOldDataInput] = useState<OldDataFormat>();\n\n  const onInputTAChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    try {\n      setOldDataInput(JSON.parse(event.currentTarget.value))\n      setError(false);\n    } catch (error) {\n      if (event.currentTarget.value === '') {\n        setError(false);\n        setOutputTextAreaValue('');\n      } else {\n        setError(true);\n      }\n    }\n  }\n\n  const onOutputTAClicked = (element: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => {\n    try {\n      element.currentTarget.select()\n      document.execCommand(\"copy\")\n    } catch (error) {\n      console.error(error) \n    }\n  }\n\n  useEffect(() => {\n    if (oldDataInput) {\n      try {\n        setOutputTextAreaValue(JSON.stringify(migratePanelJSON(oldDataInput), null, 2));\n      } catch (error) {\n        setError(true);\n      }\n    }\n  }, [oldDataInput]);\n\n  const wrapperBoxHeight = error ? 'calc(100vh - 68px - 152px - 50px)' : 'calc(100vh - 68px - 152px)'\n\n  return (\n    <Box padding={4}>\n      <Heading>How does it work?</Heading>\n      <Text>\n        Go to your v0.x.x ImageIt panel, click on the panel title &gt; Inspect &gt; Panel JSON.\n        <br />\n        Copy the content and paste it inside the input text area below.\n      </Text>\n      <Box paddingTop={4} paddingBottom={4} display={['block', 'block', 'block', 'block', 'flex']} height={wrapperBoxHeight}>\n        <Flex width={1} padding={2} height={['50%', '50%', '50%', '50%', '100%']}>\n          <textarea  placeholder='Input text area. Paste panel JSON here.' onChange={onInputTAChange} style={{width: '100%', height: '100%', resize: 'none'}}></textarea>\n        </Flex>\n\n        <Flex width={1} padding={2} height={['50%', '50%', '50%', '50%', '100%']}>\n          <textarea placeholder='Output text area. Not editable. Click to copy content to clipboard.' onClick={onOutputTAClicked} value={outputTextAreaValue} onChange={() => {}} style={{width: '100%', height: '100%', resize: 'none'}}></textarea>\n        </Flex>\n      </Box>\n      {error && <Box>\n        <Flash variant=\"danger\">\n          Error parsing JSON. Check that the format is ok.\n        </Flash>\n      </Box>}\n    </Box>\n  );\n}\n\nexport default App;\n","import { Header, Text } from '@primer/components'\n\nconst AppHeader = () => {\n\treturn(\n\t\t<Header>\n\t\t\t<Header.Item full>\n\t\t\t\t<Text paddingLeft={4} fontSize={4}>ImageIt Migration</Text>\n\t\t\t</Header.Item>\n\t\t\t<Header.Link href=\"https://github.com/pierosavi/imageit-migration/blob/master/README.md\">\n\t\t\t\t<Text fontSize={4}>README &amp; FAQ</Text>\n\t\t\t</Header.Link>\n\t\t</Header>\n\t)\n}\n\nexport default AppHeader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BaseStyles } from '@primer/components'\nimport AppHeader from './AppHeader';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BaseStyles>\n      <AppHeader />\n      <App />\n    </BaseStyles>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}